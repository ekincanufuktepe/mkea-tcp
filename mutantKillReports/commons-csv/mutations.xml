<?xml version="1.0" encoding="UTF-8"?>
<mutations>
<mutation detected='true' status='KILLED' numberOfTestsRun='238'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V</methodDescription><lineNumber>785</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>66</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='238'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(CLjava/lang/Character;Lorg/apache/commons/csv/QuoteMode;Ljava/lang/Character;Ljava/lang/Character;ZZLjava/lang/String;Ljava/lang/String;[Ljava/lang/Object;[Ljava/lang/String;ZZZZZZZ)V</methodDescription><lineNumber>793</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>126</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::validate</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>799</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()|org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()|org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()|org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()|org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>883</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>338</index><block>66</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>802</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testEquals()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>805</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>30</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEquals()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>810</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>47</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>813</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>59</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>816</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>71</index><block>13</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>819</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>83</index><block>15</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>822</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>95</index><block>17</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>825</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>107</index><block>19</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>828</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>119</index><block>21</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>831</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>131</index><block>23</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>835</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>146</index><block>26</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>838</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>159</index><block>29</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>842</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>174</index><block>32</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>845</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>187</index><block>35</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>849</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>202</index><block>38</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>852</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>215</index><block>41</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>856</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>230</index><block>44</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>859</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>243</index><block>47</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>862</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>256</index><block>50</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>865</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>268</index><block>52</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>868</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>280</index><block>54</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>871</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>292</index><block>56</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>875</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>307</index><block>59</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>878</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>320</index><block>62</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>881</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>333</index><block>65</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::equals</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='30'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>798</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()|org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()|org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()|org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()|org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='20'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>801</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testEquals()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>804</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>809</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>812</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>815</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>818</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>79</index><block>14</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>821</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>16</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>824</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><block>18</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>827</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>115</index><block>20</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='16'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>830</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>127</index><block>22</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>833</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><block>24</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>834</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>142</index><block>25</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='14'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>837</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>155</index><block>28</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='13'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>840</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>165</index><block>30</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>841</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>170</index><block>31</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>844</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>183</index><block>34</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>847</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>193</index><block>36</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>198</index><block>37</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>851</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>211</index><block>40</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>854</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>221</index><block>42</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>855</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>226</index><block>43</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>858</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>239</index><block>46</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>861</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>252</index><block>49</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>864</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>264</index><block>51</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>867</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>276</index><block>53</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>870</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>288</index><block>55</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>873</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>298</index><block>57</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>874</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>303</index><block>58</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>877</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>316</index><block>61</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>equals</mutatedMethod><methodDescription>(Ljava/lang/Object;)Z</methodDescription><lineNumber>880</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>329</index><block>64</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>format</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>899</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>64</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVFormat::format</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>format</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>898</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>40</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests></succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>format</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>898</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>4</block><killingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>format</mutatedMethod><methodDescription>([Ljava/lang/Object;)Ljava/lang/String;</methodDescription><lineNumber>896</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAllowDuplicateHeaderNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>913</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getAllowDuplicateHeaderNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAllowDuplicateHeaderNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>913</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getAllowDuplicateHeaderNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAllowMissingColumnNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>923</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getAllowMissingColumnNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAllowMissingColumnNames</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>923</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getAllowMissingColumnNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='104'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAutoFlush</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getAutoFlush</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='104'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getAutoFlush</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>933</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getAutoFlush</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='170'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getCommentMarker</mutatedMethod><methodDescription>()Ljava/lang/Character;</methodDescription><lineNumber>942</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced Character return value with 0 for org/apache/commons/csv/CSVFormat::getCommentMarker</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='247'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getDelimiter</mutatedMethod><methodDescription>()C</methodDescription><lineNumber>951</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced char return with 0 for org/apache/commons/csv/CSVFormat::getDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='179'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getEscapeCharacter</mutatedMethod><methodDescription>()Ljava/lang/Character;</methodDescription><lineNumber>960</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</succeedingTests><description>replaced Character return value with 0 for org/apache/commons/csv/CSVFormat::getEscapeCharacter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='224'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getHeader</mutatedMethod><methodDescription>()[Ljava/lang/String;</methodDescription><lineNumber>969</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getHeaderComments</mutatedMethod><methodDescription>()[Ljava/lang/String;</methodDescription><lineNumber>978</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='165'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreEmptyLines</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>988</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getIgnoreEmptyLines</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='165'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreEmptyLines</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>988</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getIgnoreEmptyLines</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='86'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreHeaderCase</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>998</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getIgnoreHeaderCase</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='86'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreHeaderCase</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>998</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getIgnoreHeaderCase</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='164'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreSurroundingSpaces</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1007</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getIgnoreSurroundingSpaces</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='164'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getIgnoreSurroundingSpaces</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1007</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getIgnoreSurroundingSpaces</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='127'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getNullString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1021</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultText()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullStringDefault()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPostgreSqlNullStringDefaultCsv()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVFormat::getNullString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='233'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getQuoteCharacter</mutatedMethod><methodDescription>()Ljava/lang/Character;</methodDescription><lineNumber>1030</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced Character return value with 0 for org/apache/commons/csv/CSVFormat::getQuoteCharacter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='88'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getQuoteMode</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/QuoteMode;</methodDescription><lineNumber>1039</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testRFC4180()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::getQuoteMode</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getRecordSeparator</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1048</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVFormat::getRecordSeparator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='54'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getSkipHeaderRecord</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1057</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getSkipHeaderRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='54'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getSkipHeaderRecord</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1057</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testParse()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getSkipHeaderRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='113'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getTrailingDelimiter</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1067</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getTrailingDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='113'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getTrailingDelimiter</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1067</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getTrailingDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='206'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getTrim</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1078</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testTrim()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::getTrim</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='206'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>getTrim</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1078</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::getTrim</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>13</index><block>0</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1086</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>16</index><block>0</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1087</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>22</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1087</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>35</index><block>3</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1088</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>41</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1088</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>54</index><block>6</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1089</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1089</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>73</index><block>9</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1090</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>79</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1090</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>92</index><block>12</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1091</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>98</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1091</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>111</index><block>15</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1092</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>117</index><block>15</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1092</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>128</index><block>18</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1093</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>134</index><block>18</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1093</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>145</index><block>21</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1094</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>151</index><block>21</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1094</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>162</index><block>24</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1095</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>168</index><block>24</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1095</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>179</index><block>27</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1096</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>185</index><block>27</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1096</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>196</index><block>30</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>202</index><block>30</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>213</index><block>33</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1098</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>219</index><block>33</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1098</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>230</index><block>36</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1099</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>236</index><block>36</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1099</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>247</index><block>39</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>253</index><block>39</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>264</index><block>42</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>270</index><block>42</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>283</index><block>45</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>289</index><block>45</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1102</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>293</index><block>46</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>299</index><block>46</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>Replaced integer multiplication with division</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>303</index><block>47</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1087</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1088</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1089</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1090</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1091</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>101</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1092</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>120</index><block>15</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1093</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><block>18</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1094</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>154</index><block>21</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1095</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>171</index><block>24</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1096</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>188</index><block>27</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1097</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>205</index><block>30</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1098</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>222</index><block>33</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1099</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>239</index><block>36</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1100</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>256</index><block>39</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>273</index><block>42</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>hashCode</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>1104</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>308</index><block>47</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testEquals()</succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/CSVFormat::hashCode</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isCommentMarkerSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isCommentMarkerSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isCommentMarkerSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isCommentMarkerSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='32'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isCommentMarkerSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isEscapeCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isEscapeCharacterSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='98'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isEscapeCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isEscapeCharacterSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='120'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isEscapeCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1124</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(C)Z</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>14</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVParserTest.testInvalidFormat()|org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isLineBreak</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(C)Z</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isLineBreak</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='244'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(C)Z</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testInvalidFormat()|org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='242'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(C)Z</methodDescription><lineNumber>639</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVParserTest.testInvalidFormat()|org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(Ljava/lang/Character;)Z</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>10</index><block>4</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isLineBreak</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='126'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(Ljava/lang/Character;)Z</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>14</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isLineBreak</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='129'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(Ljava/lang/Character;)Z</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='114'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isLineBreak</mutatedMethod><methodDescription>(Ljava/lang/Character;)Z</methodDescription><lineNumber>651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isNullStringSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isNullStringSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='21'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isNullStringSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isNullStringSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isNullStringSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='103'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isQuoteCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVFormat::isQuoteCharacterSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='21'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isQuoteCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVFormat::isQuoteCharacterSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>isQuoteCharacterSet</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>1142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsWithNull()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsOne()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>newFormat</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>675</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>28</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::newFormat</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='51'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/io/Reader;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>1159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/File;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;</methodDescription><lineNumber>1198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1283</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1288</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>12</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1287</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>23</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithQuotes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1289</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>37</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithEscapes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Appendable;)Lorg/apache/commons/csv/CSVPrinter;</methodDescription><lineNumber>1176</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='101'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='13'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1221</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>3</block><killingTests>org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='98'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1231</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='13'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='94'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>14</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>67</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='94'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1241</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>100</index><block>18</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='94'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='94'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1251</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='91'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1256</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>13</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='78'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>47</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithQuotes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1257</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>61</index><block>14</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithEscapes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/nio/file/Path;Ljava/nio/charset/Charset;)Lorg/apache/commons/csv/CSVPrinter;</methodDescription><lineNumber>1278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Appendable;[Ljava/lang/Object;)V</methodDescription><lineNumber>1350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Appendable;[Ljava/lang/Object;)V</methodDescription><lineNumber>1351</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Appendable;[Ljava/lang/Object;)V</methodDescription><lineNumber>1350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Appendable;[Ljava/lang/Object;)V</methodDescription><lineNumber>1351</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Appendable;[Ljava/lang/Object;)V</methodDescription><lineNumber>1353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>38</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::println</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>57</index><block>10</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>136</index><block>25</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1424</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>121</index><block>22</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1422</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>116</index><block>21</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>48</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1406</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>9</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1408</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1413</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>81</index><block>15</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1415</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>93</index><block>17</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1404</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><block>24</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1428</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>136</index><block>25</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1410</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>71</index><block>13</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testCSV259()</killingTests><succeedingTests></succeedingTests><description>removed call to java/lang/StringBuilder::setLength</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>58</index><block>10</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>117</index><block>21</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>122</index><block>22</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>111</index><block>20</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1384</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>106</index><block>19</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>6</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>46</index><block>7</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1370</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><block>9</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1372</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>58</index><block>10</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1375</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>72</index><block>13</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1377</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>84</index><block>15</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1368</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>117</index><block>21</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithEscapes</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1390</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>122</index><block>22</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>59</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1581</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>109</index><block>22</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1577</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>95</index><block>19</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1551</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1566</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1568</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>59</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1564</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>105</index><block>21</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1581</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>109</index><block>22</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1552</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithEscapes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)V</methodDescription><lineNumber>1570</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>73</index><block>14</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>removed call to java/lang/StringBuilder::setLength</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='69'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>108</index><block>23</block><killingTests>org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='69'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>131</index><block>27</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1486</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>180</index><block>37</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='63'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>202</index><block>40</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>306</index><block>62</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='67'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1492</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>174</index><block>36</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1536</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>300</index><block>61</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='63'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1496</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>190</index><block>39</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='78'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1450</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='78'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1453</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1462</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>17</block><killingTests>org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='69'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1469</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><block>23</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1474</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>112</index><block>24</block><killingTests>org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='69'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1480</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><block>27</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><block>30</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>31</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>156</index><block>32</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>159</index><block>33</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='67'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1488</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>162</index><block>34</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1486</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><block>37</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1495</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>185</index><block>38</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='63'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1500</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>202</index><block>40</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='69'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>211</index><block>42</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1517</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>241</index><block>50</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>274</index><block>56</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1530</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>277</index><block>57</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1528</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>306</index><block>62</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printWithQuotes</mutatedMethod><methodDescription>(Ljava/lang/Object;Ljava/lang/CharSequence;Ljava/lang/Appendable;Z)V</methodDescription><lineNumber>1466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>100</index><block>21</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printWithEscapes</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>printer</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVPrinter;</methodDescription><lineNumber>1311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::printer</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='70'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>println</mutatedMethod><methodDescription>(Ljava/lang/Appendable;)V</methodDescription><lineNumber>1324</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='70'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>println</mutatedMethod><methodDescription>(Ljava/lang/Appendable;)V</methodDescription><lineNumber>1327</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>249</index><block>71</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVFormat::toString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1592</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1596</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1600</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><block>18</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1604</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>91</index><block>25</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1608</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>114</index><block>32</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1612</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><block>38</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1616</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>160</index><block>45</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1619</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>172</index><block>49</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1622</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>184</index><block>53</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1626</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>205</index><block>58</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='19'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>1630</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>227</index><block>64</block><killingTests>org.apache.commons.csv.CSVFormatTest.testToString()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toStringArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/String;</methodDescription><lineNumber>1642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>52</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='238'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toStringArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/String;</methodDescription><lineNumber>1638</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toStringArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/String;</methodDescription><lineNumber>1644</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>34</index><block>3</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toStringArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/String;</methodDescription><lineNumber>1642</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>52</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>toStringArray</mutatedMethod><methodDescription>([Ljava/lang/Object;)[Ljava/lang/String;</methodDescription><lineNumber>1646</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>56</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::toStringArray</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>56</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>63</index><block>13</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>68</index><block>14</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>71</index><block>15</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1661</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>50</index><block>10</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>Changed increment from -1 to 1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><block>12</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1650</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1657</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>8</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><block>11</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><block>13</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>68</index><block>14</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><block>15</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1651</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::trim</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>trim</mutatedMethod><methodDescription>(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;</methodDescription><lineNumber>1663</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>84</index><block>19</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::trim</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='238'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsRecordSeparatorThrowsException()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>19</index><block>4</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='221'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>6</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>13</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='68'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1681</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>15</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1686</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>83</index><block>22</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='48'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1686</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>89</index><block>24</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1691</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>115</index><block>31</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='221'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1691</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>121</index><block>33</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><block>40</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='67'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1696</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>42</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>179</index><block>49</block><killingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='203'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1701</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>183</index><block>50</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='237'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>196</index><block>53</block><killingTests>org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuotePolicyNoneWithoutEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testEqualsDelimiter()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testNewFormat()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='83'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>199</index><block>54</block><killingTests>org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>validate</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>1709</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>228</index><block>58</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>valueOf</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>688</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()|org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()|org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()|org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()|org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::valueOf</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withAllowDuplicateHeaderNames</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1724</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testJiraCsv236()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withAllowDuplicateHeaderNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withAllowDuplicateHeaderNames</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1735</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElementsFalse()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withAllowDuplicateHeaderNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='12'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withAllowMissingColumnNames</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1749</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withAllowMissingColumnNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withAllowMissingColumnNames</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1761</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withAllowMissingColumnNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withAutoFlush</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1777</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withAutoFlush</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withCommentMarker</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1795</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withCommentMarker</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='49'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withCommentMarker</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1810</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStartCRThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='43'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withCommentMarker</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1813</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withCommentMarker</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='28'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withDelimiter</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1829</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithDelimiterLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVParserTest.testInvalidFormat()|org.apache.commons.csv.CSVPrinterTest.testInvalidFormat()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withDelimiter</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1832</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithDelimiter()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEquals()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='64'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withEscape</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1848</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='73'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withEscape</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1861</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEscapeCRThrowsExceptions()|org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testDelimiterSameAsEscapeThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='71'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withEscape</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1864</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEscape()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEscapeSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withFirstRecordAsHeader</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1887</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withFirstRecordAsHeader</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1919</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1922</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>45</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/lang/Class;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1926</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>52</index><block>7</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withHeader</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1956</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1956</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>15</index><block>5</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withHeader</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1990</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>43</index><block>5</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1990</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>38</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1991</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>33</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1987</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1990</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>43</index><block>5</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>(Ljava/sql/ResultSetMetaData;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>1994</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>50</index><block>7</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withHeader</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='84'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeader</mutatedMethod><methodDescription>([Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2021</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithHeader()|org.apache.commons.csv.CSVFormatTest.testWithEmptyEnum()|org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testGetHeader()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnum()|org.apache.commons.csv.CSVFormatTest.testDuplicateHeaderElements()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testJiraCsv236()|org.apache.commons.csv.CSVFormatTest.testWithHeaderEnumNull()|org.apache.commons.csv.CSVFormatTest.testWithHeaderResultSetNull()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withHeader</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withHeaderComments</mutatedMethod><methodDescription>([Ljava/lang/Object;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2043</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withHeaderComments</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreEmptyLines</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2057</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreEmptyLines</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='29'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreEmptyLines</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2069</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreEmptyLines</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreHeaderCase</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2083</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreHeaderCase</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreHeaderCase</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2096</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testHashCodeAndWithIgnoreHeaderCase()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreHeaderCase</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='20'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreSurroundingSpaces</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreSurroundingSpaces</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withIgnoreSurroundingSpaces</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithIgnoreSurround()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withIgnoreSurroundingSpaces</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withNullString</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2141</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withNullString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='52'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withQuote</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2157</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withQuote</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='71'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withQuote</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithQuoteLFThrowsException()|org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='70'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withQuote</mutatedMethod><methodDescription>(Ljava/lang/Character;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>62</index><block>5</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithQuoteChar()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsDelimiterThrowsException()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsException()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testQuoteCharSameAsCommentStartThrowsExceptionForWrapperType()|org.apache.commons.csv.CSVFormatTest.testEqualsLeftNoQuoteRightQuote()|org.apache.commons.csv.CSVFormatTest.testEqualsNoQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsQuoteChar()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withQuote</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='35'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withQuoteMode</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/QuoteMode;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testEqualsQuotePolicy()|org.apache.commons.csv.CSVFormatTest.testPrintWithoutQuotes()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuotes()|org.apache.commons.csv.CSVFormatTest.testEqualsCommentStart()|org.apache.commons.csv.CSVFormatTest.testPrintWithQuoteModeIsNONE()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreSurroundingSpaces()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsIgnoreEmptyLines()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsEscape()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withQuoteMode</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='16'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withRecordSeparator</mutatedMethod><methodDescription>(C)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2208</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withRecordSeparator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='34'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withRecordSeparator</mutatedMethod><methodDescription>(Ljava/lang/String;)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2227</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCR()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorLF()|org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testWithRecordSeparatorCRLF()|org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithCRLF()|org.apache.commons.csv.CSVFormatTest.testPrintWithEscapesEndWithoutCRLF()|org.apache.commons.csv.CSVFormatTest.testEqualsRecordSeparator()|org.apache.commons.csv.CSVFormatTest.testEqualsNullString()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHeader()|org.apache.commons.csv.CSVFormatTest.testFormatToString()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withRecordSeparator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withSkipHeaderRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2242</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withSkipHeaderRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='27'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withSkipHeaderRecord</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithFirstRecordAsHeader()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testEqualsSkipHeaderRecord()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withSkipHeaderRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withSystemRecordSeparator</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2274</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>2</block><killingTests>org.apache.commons.csv.CSVFormatTest.testWithSystemRecordSeparator()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withSystemRecordSeparator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withTrailingDelimiter</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withTrailingDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withTrailingDelimiter</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2297</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withTrailingDelimiter</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='13'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withTrim</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2311</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testTrim()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withTrim</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat</mutatedClass><mutatedMethod>withTrim</mutatedMethod><methodDescription>(Z)Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>2325</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>1</block><killingTests>org.apache.commons.csv.CSVFormatTest.testTrim()|org.apache.commons.csv.CSVFormatTest.testEqualsHash()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testTrim()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat::withTrim</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='126'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>removed call to org/apache/commons/csv/ExtendedBufferedReader::close</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>getCharacterPosition</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>90</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/Lexer::getCharacterPosition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='47'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>99</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/Lexer::getCurrentLineNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>getFirstEol</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()</killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/Lexer::getFirstEol</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>107</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isCommentStart</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isCommentStart</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isCommentStart</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>12</index><block>2</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isCommentStart</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isCommentStart</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='122'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isDelimiter</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isDelimiter</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isDelimiter</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>12</index><block>2</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isDelimiter</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isDelimiter</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>115</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEndOfFile</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isEndOfFile</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEndOfFile</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isEndOfFile</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEndOfFile</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='17'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEscape</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEscape</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>12</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isEscape</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>126</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>32</index><block>5</block><killingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isMetaChar</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>28</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isMetaChar</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>131</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isMetaChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isQuoteChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isQuoteChar</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isQuoteChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>12</index><block>2</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isQuoteChar</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isQuoteChar</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isStartOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isStartOfLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='122'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isStartOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isStartOfLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isStartOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isStartOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isStartOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isWhitespace</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>12</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::isWhitespace</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isWhitespace</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>16</index><block>5</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::isWhitespace</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isWhitespace</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>isWhitespace</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='155'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>mapNullToDisabled</mutatedMethod><methodDescription>(Ljava/lang/Character;)C</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='155'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>mapNullToDisabled</mutatedMethod><methodDescription>(Ljava/lang/Character;)C</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced char return with 0 for org/apache/commons/csv/Lexer::mapNullToDisabled</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>187</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='21'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>194</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>49</index><block>8</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='129'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><block>10</block><killingTests>org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='34'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>12</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>74</index><block>14</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>78</index><block>16</block><killingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>203</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>82</index><block>18</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>99</index><block>21</block><killingTests>org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>209</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>103</index><block>23</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>113</index><block>25</block><killingTests>org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>225</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>150</index><block>30</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>173</index><block>36</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>175</index><block>37</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>233</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>182</index><block>39</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>236</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>194</index><block>41</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>240</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>208</index><block>44</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='142'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>243</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>223</index><block>48</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='144'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>223</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>251</index><block>52</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>197</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>58</index><block>9</block><killingTests>org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::nextToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='79'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>92</index><block>19</block><killingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::nextToken</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>214</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>122</index><block>26</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::nextToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='23'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>219</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>144</index><block>29</block><killingTests>org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::nextToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='143'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>nextToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>254</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>255</index><block>53</block><killingTests>org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::nextToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>284</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>286</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>291</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>62</index><block>14</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>292</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>17</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='42'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>300</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>100</index><block>23</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='34'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>303</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><block>26</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='33'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>307</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>137</index><block>29</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='18'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>32</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>180</index><block>41</block><killingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='36'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>302</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>109</index><block>24</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::parseEncapsulatedToken</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='5'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>306</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>130</index><block>27</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::parseEncapsulatedToken</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='32'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseEncapsulatedToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>309</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>146</index><block>30</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::parseEncapsulatedToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='142'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>350</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='142'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>353</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='142'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>357</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>42</index><block>7</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='142'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>360</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>10</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='15'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>362</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>67</index><block>12</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='141'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>374</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>126</index><block>24</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='141'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>378</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>137</index><block>26</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/Lexer::parseSimpleToken</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>parseSimpleToken</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/Token;I)Lorg/apache/commons/csv/Token;</methodDescription><lineNumber>375</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>132</index><block>25</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>removed call to org/apache/commons/csv/Lexer::trimTrailingSpaces</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>70</index><block>14</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/Lexer::readEndOfLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>66</index><block>13</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/Lexer::readEndOfLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='54'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='49'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>392</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>4</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>397</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>398</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>7</block><killingTests>org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='148'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>400</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>61</index><block>11</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='149'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEndOfLine</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>405</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>64</index><block>12</block><killingTests>org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='10'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>55</index><block>11</block><killingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>425</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>15</index><block>2</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>427</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>20</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>429</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testReadEscapeTab()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>431</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>30</index><block>5</block><killingTests>org.apache.commons.csv.LexerTest.testReadEscapeBackspace()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>433</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>35</index><block>6</block><killingTests>org.apache.commons.csv.LexerTest.testReadEscapeFF()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>40</index><block>7</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>59</index><block>12</block><killingTests>org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>readEscape</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>448</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>64</index><block>13</block><killingTests>org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()</killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/Lexer::readEscape</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>4</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='24'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>454</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>24</index><block>6</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>457</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><block>8</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='21'><sourceFile>Lexer.java</sourceFile><mutatedClass>org.apache.commons.csv.Lexer</mutatedClass><mutatedMethod>trimTrailingSpaces</mutatedMethod><methodDescription>(Ljava/lang/StringBuilder;)V</methodDescription><lineNumber>458</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><block>9</block><killingTests>org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to java/lang/StringBuilder::setLength</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='120'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;JJ)V</methodDescription><lineNumber>439</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>83</index><block>9</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>addRecordValue</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>444</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>2</block><killingTests>org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>addRecordValue</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>addRecordValue</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>8</block><killingTests>org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='44'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>addRecordValue</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>445</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>10</block><killingTests>org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>addRecordValue</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>449</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>51</index><block>14</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='96'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>460</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='96'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>461</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>removed call to org/apache/commons/csv/Lexer::close</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createEmptyHeaderMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createEmptyHeaderMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>466</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>23</index><block>5</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::createEmptyHeaderMap</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>499</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>222</index><block>52</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>499</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>216</index><block>51</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='124'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>481</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>484</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>3</block><killingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='27'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>487</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>41</index><block>5</block><killingTests>org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='37'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>491</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>56</index><block>9</block><killingTests>org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testParse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>498</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>71</index><block>13</block><killingTests>org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>88</index><block>15</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>501</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>92</index><block>18</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>502</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>104</index><block>21</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>502</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>108</index><block>23</block><killingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>131</index><block>30</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>507</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>135</index><block>32</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>508</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>147</index><block>35</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>508</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>149</index><block>36</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>508</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>153</index><block>38</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>514</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>185</index><block>43</block><killingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>516</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>197</index><block>46</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='61'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>499</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>222</index><block>52</block><killingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='120'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>524</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>227</index><block>53</block><killingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='120'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>createHeaders</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser$Headers;</methodDescription><lineNumber>529</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>249</index><block>59</block><killingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::createHeaders</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>543</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests></succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/CSVParser::getCurrentLineNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getFirstEndOfLine</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>553</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()</killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVParser::getFirstEndOfLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='28'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getHeaderMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>569</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='27'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getHeaderMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>574</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>25</index><block>4</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::getHeaderMap</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='27'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getHeaderMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>573</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()</succeedingTests><description>removed call to java/util/Map::putAll</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getHeaderMapRaw</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>583</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::getHeaderMapRaw</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getHeaderNames</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>599</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()</succeedingTests><description>replaced return value with Collections.emptyList for org/apache/commons/csv/CSVParser::getHeaderNames</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getRecordNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>613</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/CSVParser::getRecordNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='27'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getRecords</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>634</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>29</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>replaced return value with Collections.emptyList for org/apache/commons/csv/CSVParser::getRecords</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>getRecords</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>631</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>25</index><block>5</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>643</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVParser::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>643</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVParser::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='76'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>660</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::iterator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>674</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>707</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>171</index><block>37</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testSerialization()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>686</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>12</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='21'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>693</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>100</index><block>22</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>704</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>158</index><block>34</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>706</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>164</index><block>36</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>708</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>176</index><block>37</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>712</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>213</index><block>44</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::nextRecord</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>672</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>9</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>removed call to java/util/List::clear</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>676</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>28</index><block>3</block><killingTests></killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/Token::reset</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='111'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>680</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><block>8</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to org/apache/commons/csv/CSVParser::addRecordValue</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='93'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>683</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>60</index><block>10</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>removed call to org/apache/commons/csv/CSVParser::addRecordValue</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='73'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>nextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>687</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>75</index><block>13</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to org/apache/commons/csv/CSVParser::addRecordValue</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/io/File;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>226</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/io/InputStream;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/io/Reader;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>8</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testParse()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/lang/String;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>323</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/net/URL;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>352</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser</mutatedClass><mutatedMethod>parse</mutatedMethod><methodDescription>(Ljava/nio/file/Path;Ljava/nio/charset/Charset;Lorg/apache/commons/csv/CSVFormat;)Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>278</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.csv.CSVParserTest.testParse()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser::parse</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='131'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>67</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><block>0</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testNoHeaderMap()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testGetHeaderNamesReadOnly()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.CSVParserTest.testGetHeaderNames()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>removed call to java/io/BufferedReader::close</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='43'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>31</index><block>5</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='50'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='49'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>2</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='49'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>77</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>24</index><block>4</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests></succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/ExtendedBufferedReader::getCurrentLineNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='43'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getCurrentLineNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>80</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>32</index><block>5</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/ExtendedBufferedReader::getCurrentLineNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='152'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getLastChar</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>92</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/ExtendedBufferedReader::getLastChar</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>getPosition</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>101</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/ExtendedBufferedReader::getPosition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/ExtendedBufferedReader::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>isClosed</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/ExtendedBufferedReader::isClosed</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='70'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>lookAhead</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>18</index><block>3</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/ExtendedBufferedReader::lookAhead</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='70'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>lookAhead</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>118</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to java/io/BufferedReader::mark</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>lookAhead</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>120</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>14</index><block>2</block><killingTests></killingTests><succeedingTests></succeedingTests><description>removed call to java/io/BufferedReader::reset</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='152'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>130</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>43</index><block>8</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='156'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>57</index><block>9</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='156'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>10</index><block>1</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='156'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>2</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='101'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>128</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>17</index><block>3</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='156'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>23</index><block>4</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.LexerTest.testReadEscapeBackspace()|org.apache.commons.csv.LexerTest.testReadEscapeFF()|org.apache.commons.csv.LexerTest.testIsMetaCharCommentStart()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.LexerTest.testNextToken6()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='134'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>27</index><block>5</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='134'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>31</index><block>6</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>129</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>35</index><block>7</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead1()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.LexerTest.testReadEscapeTab()|org.apache.commons.csv.LexerTest.testTrimTrailingSpacesZeroLength()|org.apache.commons.csv.LexerTest.testEscapingAtEOF()|org.apache.commons.csv.LexerTest.testBackspace()|org.apache.commons.csv.LexerTest.testFF()|org.apache.commons.csv.LexerTest.testTab()|org.apache.commons.csv.LexerTest.testEscapedBackspace()|org.apache.commons.csv.LexerTest.testEscapedCR()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter()|org.apache.commons.csv.LexerTest.testEscapedControlCharacter2()|org.apache.commons.csv.LexerTest.testEscapedFF()|org.apache.commons.csv.LexerTest.testEscapedLF()|org.apache.commons.csv.LexerTest.testEscapedTab()|org.apache.commons.csv.LexerTest.testLF()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.LexerTest.testCR()|org.apache.commons.csv.LexerTest.testEscapedCharacter()|org.apache.commons.csv.LexerTest.testEscapedMySqlNullValue()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.LexerTest.testBackslashWithoutEscaping()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.LexerTest.testDelimiterIsWhitespace()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.LexerTest.testIgnoreEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken5()|org.apache.commons.csv.LexerTest.testSurroundingSpacesAreDeleted()|org.apache.commons.csv.LexerTest.testSurroundingTabsAreDeleted()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.LexerTest.testBackslashWithEscaping()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.LexerTest.testNextToken4()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>63</index><block>9</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/ExtendedBufferedReader::read</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>21</index><block>3</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>92</index><block>14</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>85</index><block>13</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>48</index><block>7</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>151</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>64</index><block>10</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>80</index><block>12</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>91</index><block>14</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>99</index><block>15</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>101</index><block>15</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</succeedingTests><description>Replaced integer subtraction with addition</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>125</index><block>18</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>139</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>145</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>21</index><block>3</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>5</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>44</index><block>6</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>9</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>73</index><block>11</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>147</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>92</index><block>14</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLookahead2()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>111</index><block>16</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>read</mutatedMethod><methodDescription>([CII)I</methodDescription><lineNumber>165</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>130</index><block>18</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/ExtendedBufferedReader::read</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>readLine</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>189</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>36</index><block>4</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/ExtendedBufferedReader::readLine</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='25'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>readLine</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>184</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()</killingTests><succeedingTests>org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='26'><sourceFile>ExtendedBufferedReader.java</sourceFile><mutatedClass>org.apache.commons.csv.ExtendedBufferedReader</mutatedClass><mutatedMethod>readLine</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>182</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testReadChar()|org.apache.commons.csv.ExtendedBufferedReaderTest.testReadLine()|org.apache.commons.csv.LexerTest.testComments()|org.apache.commons.csv.LexerTest.testCommentsAndEmptyLines()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.ExtendedBufferedReaderTest.testEmptyInput()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>103</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>36</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>105</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>7</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>77</index><block>12</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>110</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>80</index><block>14</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>106</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>62</index><block>8</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printComment</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='9'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Ljava/lang/Appendable;Lorg/apache/commons/csv/CSVFormat;)V</methodDescription><lineNumber>111</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>86</index><block>16</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='103'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>121</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::close</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='104'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='105'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>20</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::flush</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='93'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>close</mutatedMethod><methodDescription>(Z)V</methodDescription><lineNumber>137</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><block>5</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOff()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testCloseBackwardCompatibility()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithResultSetOneRow()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to java/io/Closeable::close</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>flush</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>149</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>flush</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>150</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>12</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCloseWithFlushOn()|org.apache.commons.csv.CSVPrinterTest.testCloseWithCsvFormatAutoFlushOn()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</succeedingTests><description>removed call to java/io/Flushable::flush</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>getOut</mutatedMethod><methodDescription>()Ljava/lang/Appendable;</methodDescription><lineNumber>160</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVPrinter::getOut</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='38'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>print</mutatedMethod><methodDescription>(Ljava/lang/Object;)V</methodDescription><lineNumber>172</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>10</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDelimiterPlain()|org.apache.commons.csv.CSVPrinterTest.testEolPlain()|org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()|org.apache.commons.csv.CSVPrinterTest.testTrimOffOneColumn()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash1()|org.apache.commons.csv.CSVPrinterTest.testPlainPlain()|org.apache.commons.csv.CSVPrinterTest.testTrimOnOneColumn()|org.apache.commons.csv.CSVPrinterTest.testCSV259()|org.apache.commons.csv.CSVPrinterTest.testDelimiterEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash3()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash4()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash5()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull1()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull2()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull3()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull4()|org.apache.commons.csv.CSVPrinterTest.testEscapeNull5()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testPrintOnePositiveInteger()|org.apache.commons.csv.CSVPrinterTest.testTrimOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoteNone()|org.apache.commons.csv.CSVPrinterTest.testEolEscaped()|org.apache.commons.csv.CSVPrinterTest.testEscapeBackslash2()|org.apache.commons.csv.CSVPrinterTest.testDelimeterQuoted()|org.apache.commons.csv.CSVPrinterTest.testEolQuoted()|org.apache.commons.csv.CSVPrinterTest.testPlainEscaped()|org.apache.commons.csv.CSVPrinterTest.testPlainQuoted()|org.apache.commons.csv.CSVPrinterTest.testSingleQuoteQuoted()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>63</index><block>13</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>116</index><block>27</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>211</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>73</index><block>16</block><killingTests></killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>110</index><block>25</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>60</index><block>12</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>67</index><block>14</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>Replaced integer addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>198</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testDisabledComment()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>63</index><block>13</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>210</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>70</index><block>15</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>206</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>116</index><block>27</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>202</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>19</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>215</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>78</index><block>17</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printComment</mutatedMethod><methodDescription>(Ljava/lang/String;)V</methodDescription><lineNumber>224</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>120</index><block>28</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>253</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>255</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>26</index><block>6</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testCSV135()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='62'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecord</mutatedMethod><methodDescription>([Ljava/lang/Object;)V</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>8</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter1()|org.apache.commons.csv.CSVPrinterTest.testHeaderNotSet()|org.apache.commons.csv.CSVPrinterTest.testDontQuoteEuroFirstChar()|org.apache.commons.csv.CSVPrinterTest.testPrinter1()|org.apache.commons.csv.CSVPrinterTest.testPrinter2()|org.apache.commons.csv.CSVPrinterTest.testPrinter5()|org.apache.commons.csv.CSVPrinterTest.testPrinter7()|org.apache.commons.csv.CSVPrinterTest.testQuoteCommaFirstChar()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordTrue()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrinter2()|org.apache.commons.csv.CSVPrinterTest.testHeader()|org.apache.commons.csv.CSVPrinterTest.testPrintNullValues()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testPrinter3()|org.apache.commons.csv.CSVPrinterTest.testSkipHeaderRecordFalse()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testNotFlushable()|org.apache.commons.csv.CSVPrinterTest.testPrint()|org.apache.commons.csv.CSVPrinterTest.testPrinter4()|org.apache.commons.csv.CSVPrinterTest.testPrinter6()|org.apache.commons.csv.CSVPrinterTest.testPrintToPathWithDefaultCharset()|org.apache.commons.csv.CSVPrinterTest.testQuoteAll()|org.apache.commons.csv.CSVPrinterTest.testTrailingDelimiterOnTwoColumns()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testQuoteNonNumeric()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvBasic()|org.apache.commons.csv.CSVPrinterTest.testMongoDbTsvTabInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvCommaInValue()|org.apache.commons.csv.CSVPrinterTest.testMongoDbCsvDoubleQuoteInValue()|org.apache.commons.csv.CSVPrinterTest.testPrintCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVPrinterTest.testPrintToFileWithCharsetUtf16Be()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()|org.apache.commons.csv.CSVFormatTest.testFormatThrowsNullPointerException()|org.apache.commons.csv.issues.JiraCsv203Test.testWithEmptyValues()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAllNonNull()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutNullString()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeAll()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeMinimal()|org.apache.commons.csv.issues.JiraCsv203Test.testQuoteModeNonNumeric()|org.apache.commons.csv.issues.JiraCsv203Test.testWithoutQuoteMode()|org.apache.commons.csv.CSVFormatTest.testFormat()|org.apache.commons.csv.CSVFormatTest.testWithHeaderComments()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVFormatTest.testNullRecordSeparatorCsv106()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>317</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>319</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>30</index><block>6</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()|org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>318</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>22</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>320</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>36</index><block>7</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/lang/Iterable;)V</methodDescription><lineNumber>322</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>50</index><block>9</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithEmptyVector()</succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>47</index><block>11</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.IncrementsMutator</mutator><index>42</index><block>10</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>Changed increment from 1 to -1</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>29</index><block>5</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>383</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>47</index><block>11</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='TIMED_OUT' numberOfTestsRun='0'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>382</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>57</index><block>14</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>386</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>39</index><block>9</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::print</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>(Ljava/sql/ResultSet;)V</methodDescription><lineNumber>388</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>51</index><block>12</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>printRecords</mutatedMethod><methodDescription>([Ljava/lang/Object;)V</methodDescription><lineNumber>367</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfArrays()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()</killingTests><succeedingTests></succeedingTests><description>removed call to org/apache/commons/csv/CSVPrinter::printRecords</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='16'><sourceFile>CSVPrinter.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVPrinter</mutatedClass><mutatedMethod>println</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>234</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintRecordsWithObjectArray()|org.apache.commons.csv.CSVPrinterTest.testSingleLineComment()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllArrayOfLists()|org.apache.commons.csv.CSVPrinterTest.testExcelPrintAllIterableOfLists()|org.apache.commons.csv.CSVPrinterTest.testMultiLineComment()|org.apache.commons.csv.CSVPrinterTest.testCRComment()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentTdf()|org.apache.commons.csv.CSVPrinterTest.testHeaderCommentExcel()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSet()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinterWithResultSetMetaData()|org.apache.commons.csv.CSVPrinterTest.testJdbcPrinter()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testCSV135()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withCommentMarker()|org.apache.commons.csv.issues.JiraCsv154Test.testJiraCsv154_withHeaderComments()</succeedingTests><description>removed call to org/apache/commons/csv/CSVFormat::println</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='118'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>&#60;init&#62;</mutatedMethod><methodDescription>(Lorg/apache/commons/csv/CSVParser;[Ljava/lang/String;Ljava/lang/String;JJ)V</methodDescription><lineNumber>64</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>14</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='20'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(I)Ljava/lang/String;</methodDescription><lineNumber>89</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>7</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::get</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/Enum;)Ljava/lang/String;</methodDescription><lineNumber>78</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>8</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetWithEnum()</killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::get</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='22'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>127</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>65</index><block>11</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::get</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='29'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>117</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='26'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>get</mutatedMethod><methodDescription>(Ljava/lang/String;)Ljava/lang/String;</methodDescription><lineNumber>122</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>32</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getCharacterPosition</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>142</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testSerialization()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/CSVRecord::getCharacterPosition</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='18'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getComment</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>154</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::getComment</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='38'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getHeaderMapRaw</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='38'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getHeaderMapRaw</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>158</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::getHeaderMapRaw</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getParser</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVParser;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::getParser</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='8'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>getRecordNumber</mutatedMethod><methodDescription>()J</methodDescription><lineNumber>188</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()</killingTests><succeedingTests></succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/CSVRecord::getRecordNumber</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>hasComment</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVRecord::hasComment</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>hasComment</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVRecord::hasComment</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>hasComment</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>201</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>0</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv167Test.parse()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isConsistent</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>21</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVRecord::isConsistent</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isConsistent</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>17</index><block>4</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVRecord::isConsistent</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isConsistent</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isConsistent</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>216</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isMapped</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>15</index><block>4</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVRecord::isMapped</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isMapped</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>19</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVRecord::isMapped</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isMapped</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='5'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isMapped</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>228</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>13</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVRecord::isSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>15</index><block>3</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVRecord::isSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>4</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(I)Z</methodDescription><lineNumber>239</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>9</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetInt()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>18</index><block>6</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVRecord::isSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>22</index><block>7</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVRecord::isSet</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testIsSetString()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>isSet</mutatedMethod><methodDescription>(Ljava/lang/String;)Z</methodDescription><lineNumber>250</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>5</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>iterator</mutatedMethod><methodDescription>()Ljava/util/Iterator;</methodDescription><lineNumber>260</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>6</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testRoundtrip()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::iterator</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>putIn</mutatedMethod><methodDescription>(Ljava/util/Map;)Ljava/util/Map;</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.ConditionalsBoundaryMutator</mutator><index>38</index><block>10</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</succeedingTests><description>changed conditional boundary</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='7'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>putIn</mutatedMethod><methodDescription>(Ljava/util/Map;)Ljava/util/Map;</methodDescription><lineNumber>272</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>5</index><block>1</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>putIn</mutatedMethod><methodDescription>(Ljava/util/Map;)Ljava/util/Map;</methodDescription><lineNumber>277</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>38</index><block>10</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='3'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>putIn</mutatedMethod><methodDescription>(Ljava/util/Map;)Ljava/util/Map;</methodDescription><lineNumber>273</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>9</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::putIn</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='4'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>putIn</mutatedMethod><methodDescription>(Ljava/util/Map;)Ljava/util/Map;</methodDescription><lineNumber>281</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>60</index><block>16</block><killingTests>org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::putIn</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='22'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>size</mutatedMethod><methodDescription>()I</methodDescription><lineNumber>290</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced int return with 0 for org/apache/commons/csv/CSVRecord::size</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='2'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>toList</mutatedMethod><methodDescription>()Ljava/util/List;</methodDescription><lineNumber>301</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testRoundtrip()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testIterator()</succeedingTests><description>replaced return value with Collections.emptyList for org/apache/commons/csv/CSVRecord::toList</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='6'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>toMap</mutatedMethod><methodDescription>()Ljava/util/Map;</methodDescription><lineNumber>310</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>11</index><block>2</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv248Test.testJiraCsv248()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::toMap</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>321</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>28</index><block>9</block><killingTests>org.apache.commons.csv.CSVRecordTest.testToString()</killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/CSVRecord::toString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='63'><sourceFile>CSVRecord.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVRecord</mutatedClass><mutatedMethod>values</mutatedMethod><methodDescription>()[Ljava/lang/String;</methodDescription><lineNumber>326</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVRecord::values</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>getNextRecord</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>143</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>7</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser$CSVRecordIterator::getNextRecord</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='36'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanFalseReturnValsMutator</mutator><index>30</index><block>7</block><killingTests>org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>replaced boolean return with false for org/apache/commons/csv/CSVParser$CSVRecordIterator::hasNext</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>153</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>10</index><block>2</block><killingTests>org.apache.commons.csv.CSVParserTest.testClose()</killingTests><succeedingTests></succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVParser$CSVRecordIterator::hasNext</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='39'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.BooleanTrueReturnValsMutator</mutator><index>34</index><block>8</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced boolean return with true for org/apache/commons/csv/CSVParser$CSVRecordIterator::hasNext</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='40'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>152</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='40'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>155</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>16</index><block>3</block><killingTests>org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='40'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>hasNext</mutatedMethod><methodDescription>()Z</methodDescription><lineNumber>159</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.issues.JiraCsv167Test.parse()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='74'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>164</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>6</index><block>1</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='73'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>170</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>28</index><block>4</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt</killingTests><succeedingTests>org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)|org.apache.commons.csv.issues.JiraCsv198Test.test()</succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='39'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>173</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>37</index><block>6</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='73'><sourceFile>CSVParser.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVParser$CSVRecordIterator</mutatedClass><mutatedMethod>next</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVRecord;</methodDescription><lineNumber>178</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>49</index><block>9</block><killingTests>org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()</killingTests><succeedingTests>org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVParser$CSVRecordIterator::next</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copy</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;)J</methodDescription><lineNumber>60</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>2</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/IOUtils::copy</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copy</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Ljava/nio/CharBuffer;)J</methodDescription><lineNumber>84</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>27</index><block>3</block><killingTests></killingTests><succeedingTests></succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copy</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Ljava/nio/CharBuffer;)J</methodDescription><lineNumber>81</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>39</index><block>5</block><killingTests></killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='NO_COVERAGE' numberOfTestsRun='0'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copy</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/lang/Appendable;Ljava/nio/CharBuffer;)J</methodDescription><lineNumber>86</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>43</index><block>6</block><killingTests></killingTests><succeedingTests></succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/IOUtils::copy</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copyLarge</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/io/Writer;)J</methodDescription><lineNumber>108</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>8</index><block>1</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/IOUtils::copyLarge</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copyLarge</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/io/Writer;[C)J</methodDescription><lineNumber>134</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.MathMutator</mutator><index>21</index><block>2</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</succeedingTests><description>Replaced long addition with subtraction</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copyLarge</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/io/Writer;[C)J</methodDescription><lineNumber>132</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NegateConditionalsMutator</mutator><index>33</index><block>4</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</killingTests><succeedingTests></succeedingTests><description>negated conditional</description></mutation>
<mutation detected='false' status='SURVIVED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copyLarge</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/io/Writer;[C)J</methodDescription><lineNumber>136</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.PrimitiveReturnsMutator</mutator><index>37</index><block>5</block><killingTests></killingTests><succeedingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</succeedingTests><description>replaced long return with 0 for org/apache/commons/csv/IOUtils::copyLarge</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>IOUtils.java</sourceFile><mutatedClass>org.apache.commons.csv.IOUtils</mutatedClass><mutatedMethod>copyLarge</mutatedMethod><methodDescription>(Ljava/io/Reader;Ljava/io/Writer;[C)J</methodDescription><lineNumber>133</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>15</index><block>1</block><killingTests>org.apache.commons.csv.CSVPrinterTest.testPrintReaderWithoutQuoteToWriter()</killingTests><succeedingTests></succeedingTests><description>removed call to java/io/Writer::write</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='121'><sourceFile>Token.java</sourceFile><mutatedClass>org.apache.commons.csv.Token</mutatedClass><mutatedMethod>reset</mutatedMethod><methodDescription>()V</methodDescription><lineNumber>59</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.VoidMethodCallMutator</mutator><index>6</index><block>0</block><killingTests>org.apache.commons.csv.CSVParserTest.testGetOneLine()|org.apache.commons.csv.CSVParserTest.testGetOneLineOneParser()|org.apache.commons.csv.CSVParserTest.testCSV235()|org.apache.commons.csv.CSVParserTest.testExcelFormat2()|org.apache.commons.csv.CSVParserTest.testForEach()|org.apache.commons.csv.CSVParserTest.testMultipleIterators()|org.apache.commons.csv.CSVParserTest.testHeadersMissingException()|org.apache.commons.csv.CSVParserTest.testHeadersMissingOneColumnException()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingThrowsWhenNotAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersNotAllowed()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorExcel()|org.apache.commons.csv.CSVParserTest.testExcelFormat1()|org.apache.commons.csv.CSVParserTest.testIterator()|org.apache.commons.csv.CSVParserTest.testEmptyLineBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testIteratorSequenceBreaking()|org.apache.commons.csv.CSVParserTest.testEndOfFileBehaviorCSV()|org.apache.commons.csv.CSVParserTest.testSkipAutoHeader()|org.apache.commons.csv.CSVParserTest.testSkipSetAltHeaders()|org.apache.commons.csv.CSVParserTest.testHeadersWithNullColumnName()|org.apache.commons.csv.CSVParserTest.testIgnoreCaseHeaderMapping()|org.apache.commons.csv.CSVParserTest.testRepeatedHeadersAreReturnedInCSVRecordHeaderNames()|org.apache.commons.csv.CSVParserTest.testSkipHeaderOverrideDuplicateHeaders()|org.apache.commons.csv.CSVParserTest.testSkipSetHeader()|org.apache.commons.csv.CSVRecordTest.testGetInt()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping2()|org.apache.commons.csv.CSVRecordTest.testIterator()|org.apache.commons.csv.CSVParserTest.testExcelHeaderCountLessThanData()|org.apache.commons.csv.CSVParserTest.testGetLine()|org.apache.commons.csv.CSVParserTest.testHeader()|org.apache.commons.csv.CSVRecordTest.testGetString()|org.apache.commons.csv.CSVParserTest.testGetRecords()|org.apache.commons.csv.CSVParserTest.testHeaderMissing()|org.apache.commons.csv.CSVParserTest.testProvidedHeaderAuto()|org.apache.commons.csv.issues.JiraCsv247Test.testHeadersMissingOneColumnWhenAllowingMissingColumnNames()|org.apache.commons.csv.CSVParserTest.testHeaderComment()|org.apache.commons.csv.CSVParserTest.testRoundtrip()|org.apache.commons.csv.CSVParserTest.testTrailingDelimiter()|org.apache.commons.csv.CSVParserTest.testTrim()|org.apache.commons.csv.CSVRecordTest.testPutInMap()|org.apache.commons.csv.CSVRecordTest.testToMap()|org.apache.commons.csv.CSVParserTest.testDefaultFormat()|org.apache.commons.csv.CSVParserTest.testMappedButNotSetAsOutlook2007ContactExport()|org.apache.commons.csv.CSVParserTest.testBackslashEscaping()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordPositionWithCRLF()|org.apache.commons.csv.CSVPrinterTest.testParseCustomNullValues()|org.apache.commons.csv.CSVRecordTest.testRemoveAndAddColumns()|org.apache.commons.csv.CSVRecordTest.testSerialization()|org.apache.commons.csv.issues.JiraCsv211Test.testJiraCsv211Format()|org.apache.commons.csv.issues.JiraCsv249Test.testJiraCsv249()|org.apache.commons.csv.CSVPrinterTest.testMySqlNullOutput()|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.CSVFileParserTest.[1] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV246_checkWithNoComment.txt|org.apache.commons.csv.CSVFileParserTest.[2] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_default.txt|org.apache.commons.csv.CSVFileParserTest.[3] src\test\resources\org\apache\commons\csv\CSVFileParser\testCSV85_ignoreEmpty.txt|org.apache.commons.csv.CSVFileParserTest.[4] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default.txt|org.apache.commons.csv.CSVFileParserTest.[5] src\test\resources\org\apache\commons\csv\CSVFileParser\test_default_comment.txt|org.apache.commons.csv.CSVFileParserTest.[6] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180.txt|org.apache.commons.csv.CSVFileParserTest.[7] src\test\resources\org\apache\commons\csv\CSVFileParser\test_rfc4180_trim.txt|org.apache.commons.csv.issues.JiraCsv198Test.test()|org.apache.commons.csv.CSVPrinterTest.testRandomMySql()|org.apache.commons.csv.CSVPrinterTest.testRandomRfc4180()|org.apache.commons.csv.CSVPrinterTest.testRandomTdf()|org.apache.commons.csv.CSVPrinterTest.testRandomExcel()|org.apache.commons.csv.CSVPrinterTest.testRandomDefault()</killingTests><succeedingTests>org.apache.commons.csv.CSVParserTest.testEmptyFile()|org.apache.commons.csv.CSVParserTest.testCSV57()|org.apache.commons.csv.CSVParserTest.testEmptyFileHeaderParsing()|org.apache.commons.csv.CSVParserTest.testIgnoreEmptyLines()|org.apache.commons.csv.CSVParserTest.testCarriageReturnEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineLf()|org.apache.commons.csv.CSVParserTest.testLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testCarriageReturnLineFeedEndings()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCr()|org.apache.commons.csv.CSVParserTest.testFirstEndOfLineCrLf()|org.apache.commons.csv.CSVParserTest.testHeadersMissing()|org.apache.commons.csv.CSVParserTest.testDuplicateHeadersAllowedByDefault()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithLF()|org.apache.commons.csv.CSVParserTest.testHeaderMissingWithNull()|org.apache.commons.csv.CSVParserTest.testGetRecordNumberWithCR()|org.apache.commons.csv.CSVParserTest.testGetLineNumberWithCRLF()|org.apache.commons.csv.CSVParserTest.testGetRecordWithMultiLineValues()|org.apache.commons.csv.CSVRecordTest.testGetStringNoHeader()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedPositiveInt()|org.apache.commons.csv.CSVRecordTest.testGetNullEnum()|org.apache.commons.csv.CSVRecordTest.testGetStringInconsistentRecord()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedEnum()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedName()|org.apache.commons.csv.CSVRecordTest.testGetUnmappedNegativeInt()|org.apache.commons.csv.CSVRecordTest.testIsConsistent()|org.apache.commons.csv.CSVRecordTest.testIsMapped()|org.apache.commons.csv.CSVRecordTest.testIsSetInt()|org.apache.commons.csv.CSVParserTest.testProvidedHeader()|org.apache.commons.csv.CSVRecordTest.testIsInconsistent()|org.apache.commons.csv.CSVRecordTest.testToString()|org.apache.commons.csv.CSVParserTest.testClose()|org.apache.commons.csv.CSVRecordTest.testGetWithEnum()|org.apache.commons.csv.CSVRecordTest.testIsSetString()|org.apache.commons.csv.CSVRecordTest.testToMapWithNoHeader()|org.apache.commons.csv.CSVRecordTest.testToMapWithShortRecord()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithEOL()|org.apache.commons.csv.issues.JiraCsv149Test.testJiraCsv149EndWithoutEOL()|org.apache.commons.csv.CSVParserTest.testGetHeaderMap()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithReader()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_parseWithReader()|org.apache.commons.csv.CSVRecordTest.testCSVRecordNULLValues()|org.apache.commons.csv.CSVParserTest.testBOMInputStream_ParserWithInputStream()|org.apache.commons.csv.issues.JiraCsv167Test.parse()|org.apache.commons.csv.CSVParserTest.testParse()|org.apache.commons.csv.CSVFileParserTest.testCSVUrl(File)|org.apache.commons.csv.CSVFileParserTest.testCSVFile(File)</succeedingTests><description>removed call to java/lang/StringBuilder::setLength</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='1'><sourceFile>Token.java</sourceFile><mutatedClass>org.apache.commons.csv.Token</mutatedClass><mutatedMethod>toString</mutatedMethod><methodDescription>()Ljava/lang/String;</methodDescription><lineNumber>71</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.EmptyObjectReturnValsMutator</mutator><index>19</index><block>8</block><killingTests>org.apache.commons.csv.TokenMatchersTest.testToString()</killingTests><succeedingTests></succeedingTests><description>replaced return value with &#34;&#34; for org/apache/commons/csv/Token::toString</description></mutation>
<mutation detected='true' status='KILLED' numberOfTestsRun='11'><sourceFile>CSVFormat.java</sourceFile><mutatedClass>org.apache.commons.csv.CSVFormat$Predefined</mutatedClass><mutatedMethod>getFormat</mutatedMethod><methodDescription>()Lorg/apache/commons/csv/CSVFormat;</methodDescription><lineNumber>248</lineNumber><mutator>org.pitest.mutationtest.engine.gregor.mutators.NullReturnValsMutator</mutator><index>5</index><block>0</block><killingTests>org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testMongoDbTsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testOracle()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlText()|org.apache.commons.csv.CSVFormatPredefinedTest.testExcel()|org.apache.commons.csv.CSVFormatPredefinedTest.testMySQL()|org.apache.commons.csv.CSVFormatPredefinedTest.testPostgreSqlCsv()|org.apache.commons.csv.CSVFormatPredefinedTest.testRFC4180()|org.apache.commons.csv.CSVFormatPredefinedTest.testTDF()|org.apache.commons.csv.CSVFormatPredefinedTest.testDefault()|org.apache.commons.csv.CSVFormatTest.testToStringAndWithCommentMarkerTakingCharacter()</killingTests><succeedingTests></succeedingTests><description>replaced return value with null for org/apache/commons/csv/CSVFormat$Predefined::getFormat</description></mutation>
</mutations>
